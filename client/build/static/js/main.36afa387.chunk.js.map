{"version":3,"sources":["getWeb3.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","cost","itemName","loaded","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","itemManager","Contract","ItemManager","abi","networks","address","item","Item","listenToPaymentEvent","setState","alert","error","self","events","SupplyChainStep","on","evt","returnValues","_step","methods","items","_itemIndex","call","_identifier","this","handleInputChange","event","target","value","type","checked","name","handleSubmit","createItem","send","from","result","_address","className","htmlFor","onChange","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36afa387.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from 'react'\nimport ItemManager from \"./contracts/ItemManager.json\";\nimport Item from \"./contracts/Item.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nexport class App extends Component {\n  state = { cost: 0, itemName: \"exampleItem1\", loaded: false }\n\n  componentDidMount = async ()=> {\n    try {\n      this.web3 = await getWeb3();\n      this.accounts = await this.web3.eth.getAccounts();\n      const networkId = await this.web3.eth.net.getId();\n\n      this.itemManager = new this.web3.eth.Contract(\n        ItemManager.abi,\n        ItemManager.networks[networkId] && ItemManager.networks[networkId].address\n      );\n      this.item = new this.web3.eth.Contract(\n        Item.abi,\n        Item.networks[networkId] && Item.networks[networkId].address\n      );\n      \n      // this.listenToPaymentEvent();\n      this.listenToPaymentEvent();\n      this.setState({loaded: true});\n      \n    } catch (error) {\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n    }\n  };\n\n  listenToPaymentEvent = ()=> {\n    let self = this;\n    this.itemManager.events.SupplyChainStep().on(\"data\", async function(evt) {\n      if(evt.returnValues._step === \"1\") {\n              let item = await self.itemManager.methods.items(evt.returnValues._itemIndex).call();\n              console.log(item);\n              alert(`Item ${item._identifier} was paid, deliver it now!`);\n            };\n            console.log(evt);\n    });\n  }\n\n  handleInputChange = (event)=> {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit = async ()=> {\n    const { cost, itemName } = this.state;\n    let result = await this.itemManager.methods.createItem(itemName, cost).send({from: this.accounts[0]});\n    console.log(result);\n    alert(`Send ${cost} Wei to ${result.events.SupplyChainStep.returnValues._address}`);\n  } \n\n  render() {\n    if(!this.state.loaded) {\n      return <div>Loading Web3, Accounts, and Contract...</div>;\n    }\n    return (\n      <div className=\"container my-container\">\n      <h1>Event Trigger / Supply Chain Example!</h1>\n      <h2>Items</h2>\n\n      <h3>Add Items</h3>\n      <form className=\"form-custom\">\n        <div className=\"form-group\">\n        <label htmlFor=\"price\">Cost in Wei:</label>\n        <input type=\"number\" className=\"form-control\" name=\"cost\" value={this.state.cost} onChange={this.handleInputChange}/>\n        </div>\n        <div className=\"form-group\">\n        <label htmlFor=\"name\">Item Name:</label>\n        <input type=\"text\" className=\"form-control\" name=\"itemName\" value={this.state.itemName} onChange={this.handleInputChange}/>\n        </div>\n        <button type=\"button\" className=\"btn btn-primary\" onClick={this.handleSubmit}>Create new Item</button>\n      </form>\n    </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}